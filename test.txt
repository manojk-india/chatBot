import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import LeftIngestionPanel from './LeftIngestionPanel';
import RightIngestionPanel from './RightIngestionPanel';
import './FileIngestionPage.css';

const FileIngestionPage = () => {
  // Example state, adapt as needed for your app
  const [topics, setTopics] = useState([]);
  const [sources, setSources] = useState([]);
  const [selectedTopic, setSelectedTopic] = useState('');
  const [selectedSource, setSelectedSource] = useState('');
  const [links, setLinks] = useState([]);
  const [ingestedLinks, setIngestedLinks] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(false);

  // Loading overlay state
  const [showLoading, setShowLoading] = useState(false);
  const [loadingMsg, setLoadingMsg] = useState('');
  const [timer, setTimer] = useState(10);
  const navigate = useNavigate();

  // Timer effect for loading overlay
  useEffect(() => {
    let interval;
    if (showLoading && timer > 0) {
      interval = setInterval(() => setTimer(t => t - 1), 1000);
    } else if (showLoading && timer === 0) {
      setLoadingMsg('Ingestion complete! Redirecting you to chat...');
      setTimeout(() => {
        setShowLoading(false);
        setTimer(10);
        navigate('/chatbot');
      }, 2000);
    }
    return () => clearInterval(interval);
  }, [showLoading, timer, navigate]);

  // Example handlers, adapt as needed
  const handleTopicChange = topic => setSelectedTopic(topic);
  const handleSourceChange = source => setSelectedSource(source);
  const handleLinksChange = links => setLinks(links);

  const handleIngestLinks = () => {
    if (!selectedTopic || !selectedSource || links.length === 0) {
      alert('Please select topic, source and add at least one link');
      return;
    }
    setShowLoading(true);
    setLoadingMsg('Ingestion in progress...');
    setTimer(10);
    // Simulate ingestion logic here if needed
    // setTimeout(() => setIngestedLinks([...ingestedLinks, ...links]), 10000);
  };

  return (
    <div className="file-ingestion-container">
      {showLoading && (
        <div className="ingestion-loading-overlay">
          <div className="ingestion-loading-modal">
            <div className="spinner-large"></div>
            <p>{loadingMsg}</p>
            {timer > 0 && (
              <div className="ingestion-timer">
                <span>{timer}</span> seconds remaining
              </div>
            )}
          </div>
        </div>
      )}
      <LeftIngestionPanel
        topics={topics}
        sources={sources}
        selectedTopic={selectedTopic}
        selectedSource={selectedSource}
        links={links}
        onTopicChange={handleTopicChange}
        onSourceChange={handleSourceChange}
        onLinksChange={handleLinksChange}
        onIngestLinks={handleIngestLinks}
        loading={loading}
      />
      <RightIngestionPanel
        ingestedLinks={ingestedLinks}
        selectedTopic={selectedTopic}
        selectedSource={selectedSource}
        searchTerm={searchTerm}
        onSearchChange={setSearchTerm}
        loading={loading}
      />
    </div>
  );
};

export default FileIngestionPage;



.file-ingestion-container {
  display: flex;
  flex-direction: row;
  height: calc(100vh - 64px); /* Adjust for navbar height */
  background: #f7faff;
  overflow: hidden;
  position: relative;
}

/* Loading overlay styles */
.ingestion-loading-overlay {
  position: fixed;
  top: 0; left: 0; right: 0; bottom: 0;
  background: rgba(99, 102, 241, 0.12);
  z-index: 9999;
  display: flex;
  align-items: center;
  justify-content: center;
}

.ingestion-loading-modal {
  background: #fff;
  color: #6366f1;
  border-radius: 16px;
  padding: 40px 32px;
  box-shadow: 0 8px 32px rgba(99, 102, 241, 0.18);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 24px;
  min-width: 320px;
}

.spinner-large {
  width: 48px;
  height: 48px;
  border: 5px solid #e0e7ff;
  border-top: 5px solid #6366f1;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 12px;
}

@keyframes spin {
  0% { transform: rotate(0deg);}
  100% { transform: rotate(360deg);}
}

.ingestion-timer {
  font-size: 1.2rem;
  color: #6366f1;
  background: #f1f5fb;
  padding: 8px 18px;
  border-radius: 8px;
  margin-top: 8px;
  font-weight: 600;
  letter-spacing: 1px;
}